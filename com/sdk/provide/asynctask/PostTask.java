package com.sdk.provide.asynctask;

import android.os.AsyncTask;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.Set;

public class PostTask
  extends AsyncTask<String, Void, String>
{
  private HashMap<String, String> hashMap;
  private onPostLink1Listener link1Listener;
  private String url;
  
  public PostTask(String paramString, HashMap<String, String> paramHashMap, onPostLink1Listener paramonPostLink1Listener)
  {
    this.url = paramString;
    this.hashMap = paramHashMap;
    this.link1Listener = paramonPostLink1Listener;
  }
  
  private String getPostDataString(HashMap<String, String> paramHashMap)
    throws UnsupportedEncodingException
  {
    StringBuilder localStringBuilder = new StringBuilder();
    int i = 1;
    paramHashMap = paramHashMap.entrySet().iterator();
    if (paramHashMap.hasNext())
    {
      Map.Entry localEntry = (Map.Entry)paramHashMap.next();
      if (i != 0) {
        i = 0;
      }
      for (;;)
      {
        localStringBuilder.append(URLEncoder.encode((String)localEntry.getKey(), "UTF-8"));
        localStringBuilder.append("=");
        localStringBuilder.append(URLEncoder.encode((String)localEntry.getValue(), "UTF-8"));
        break;
        localStringBuilder.append("&");
      }
    }
    return localStringBuilder.toString();
  }
  
  private String post(String paramString, HashMap<String, String> paramHashMap)
  {
    String str2 = "";
    String str1 = str2;
    try
    {
      paramString = (HttpURLConnection)new URL(paramString).openConnection();
      str1 = str2;
      paramString.setConnectTimeout(30000);
      str1 = str2;
      paramString.setRequestMethod("POST");
      str1 = str2;
      Object localObject = paramString.getOutputStream();
      str1 = str2;
      BufferedWriter localBufferedWriter = new BufferedWriter(new OutputStreamWriter((OutputStream)localObject, "UTF-8"));
      str1 = str2;
      localBufferedWriter.write(getPostDataString(paramHashMap));
      str1 = str2;
      localBufferedWriter.flush();
      str1 = str2;
      localBufferedWriter.close();
      str1 = str2;
      ((OutputStream)localObject).close();
      str1 = str2;
      if (paramString.getResponseCode() == 200)
      {
        str1 = str2;
        localObject = new BufferedReader(new InputStreamReader(paramString.getInputStream()));
        for (paramString = str2;; paramString = paramString + str2)
        {
          str1 = paramString;
          str2 = ((BufferedReader)localObject).readLine();
          paramHashMap = paramString;
          if (str2 == null) {
            break;
          }
          str1 = paramString;
        }
      }
      paramHashMap = "";
      return paramHashMap;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
    return str1;
  }
  
  protected String doInBackground(String... paramVarArgs)
  {
    return post(this.url, this.hashMap);
  }
  
  protected void onPostExecute(String paramString)
  {
    this.link1Listener.onSuccess(paramString);
  }
  
  public static abstract interface onPostLink1Listener
  {
    public abstract void onSuccess(String paramString);
  }
}


/* Location:              /Users/paulpierre/Downloads/malware-unzip/poop.jar!/com/sdk/provide/asynctask/PostTask.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       0.7.1
 */