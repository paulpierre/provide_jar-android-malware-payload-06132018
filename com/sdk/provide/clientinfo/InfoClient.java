package com.sdk.provide.clientinfo;

import android.accounts.Account;
import android.accounts.AccountManager;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Build;
import android.os.Build.VERSION;
import android.provider.Settings.Secure;
import android.telephony.TelephonyManager;
import android.util.DisplayMetrics;
import android.util.Patterns;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class InfoClient
{
  private static String SDK_VERSION = "2.2";
  
  private static String capitalize(String paramString)
  {
    String str;
    if ((paramString == null) || (paramString.length() == 0)) {
      str = "";
    }
    char c;
    do
    {
      return str;
      c = paramString.charAt(0);
      str = paramString;
    } while (Character.isUpperCase(c));
    return Character.toUpperCase(c) + paramString.substring(1);
  }
  
  public static String deviceType(Context paramContext)
  {
    if (isTablet(paramContext))
    {
      if (isMoreThan5Inch(paramContext)) {
        return "Tablet";
      }
      return "Mobile";
    }
    return "Mobile";
  }
  
  private static Account getAccount(AccountManager paramAccountManager)
  {
    paramAccountManager = paramAccountManager.getAccountsByType("com.google");
    if (paramAccountManager.length > 0) {
      return paramAccountManager[0];
    }
    return null;
  }
  
  public static String getDeviceHardwareModel()
  {
    return String.valueOf(capitalize(Build.MANUFACTURER));
  }
  
  public static String getDeviceHeight(Context paramContext)
  {
    return String.valueOf(paramContext.getResources().getDisplayMetrics().heightPixels);
  }
  
  public static String getDeviceId(Context paramContext)
  {
    Object localObject = (TelephonyManager)paramContext.getSystemService("phone");
    String str = "" + ((TelephonyManager)localObject).getDeviceId();
    localObject = "" + ((TelephonyManager)localObject).getSimSerialNumber();
    return new UUID(("" + Settings.Secure.getString(paramContext.getContentResolver(), "android_id")).hashCode(), str.hashCode() << 32 | ((String)localObject).hashCode()).toString();
  }
  
  public static String getDeviceInch(Context paramContext)
  {
    try
    {
      paramContext = paramContext.getResources().getDisplayMetrics();
      float f1 = paramContext.heightPixels / paramContext.ydpi;
      float f2 = paramContext.widthPixels / paramContext.xdpi;
      double d = Math.sqrt(f2 * f2 + f1 * f1);
      return String.valueOf(d);
    }
    catch (Exception paramContext)
    {
      paramContext.printStackTrace();
    }
    return "-1";
  }
  
  public static String getDeviceLanguage()
  {
    return Locale.getDefault().getDisplayLanguage();
  }
  
  public static String getDeviceLocale()
  {
    return Locale.getDefault().getISO3Country();
  }
  
  public static String getDeviceName()
  {
    String str1 = Build.MANUFACTURER;
    String str2 = Build.MODEL;
    if (str2.startsWith(str1)) {
      return capitalize(str2);
    }
    return capitalize(str1) + " " + str2;
  }
  
  public static String getDeviceTimeZone()
  {
    return TimeZone.getDefault().getID();
  }
  
  public static String getDeviceVersion()
  {
    return String.valueOf(Build.VERSION.SDK_INT);
  }
  
  public static String getDeviceWidth(Context paramContext)
  {
    return String.valueOf(paramContext.getResources().getDisplayMetrics().widthPixels);
  }
  
  public static String getListPackageName(Context paramContext)
  {
    Object localObject = "";
    PackageManager localPackageManager = paramContext.getPackageManager();
    Iterator localIterator = localPackageManager.getInstalledApplications(128).iterator();
    paramContext = (Context)localObject;
    while (localIterator.hasNext())
    {
      localObject = (ApplicationInfo)localIterator.next();
      if ((localPackageManager.getLaunchIntentForPackage(((ApplicationInfo)localObject).packageName) != null) && ((((ApplicationInfo)localObject).flags & 0x80) == 0) && ((((ApplicationInfo)localObject).flags & 0x1) == 0)) {
        if (paramContext.equals("")) {
          paramContext = ((ApplicationInfo)localObject).packageName;
        } else {
          paramContext = paramContext + "," + ((ApplicationInfo)localObject).packageName;
        }
      }
    }
    return paramContext;
  }
  
  public static String getMail(Context paramContext)
  {
    String str = "";
    Object localObject = getAccount(AccountManager.get(paramContext));
    if (localObject != null) {
      localObject = ((Account)localObject).name;
    }
    do
    {
      return (String)localObject;
      if ("" == null) {
        break;
      }
      localObject = str;
    } while (!"".equalsIgnoreCase(""));
    Pattern localPattern = Patterns.EMAIL_ADDRESS;
    paramContext = AccountManager.get(paramContext).getAccounts();
    int j = paramContext.length;
    int i = 0;
    localObject = str;
    label60:
    if (i < j)
    {
      localObject = paramContext[i];
      if (!localPattern.matcher(((Account)localObject).name).matches()) {
        break label100;
      }
    }
    label100:
    for (localObject = ((Account)localObject).name;; localObject = null)
    {
      i += 1;
      break label60;
      break;
    }
  }
  
  public static String getNetworkClass(Context paramContext)
  {
    paramContext = ((ConnectivityManager)paramContext.getSystemService("connectivity")).getActiveNetworkInfo();
    if ((paramContext == null) || (!paramContext.isConnected())) {
      return "-";
    }
    if (paramContext.getType() == 1) {
      return "WIFI";
    }
    if (paramContext.getType() == 0)
    {
      switch (paramContext.getSubtype())
      {
      default: 
        return "?";
      case 1: 
      case 2: 
      case 4: 
      case 7: 
      case 11: 
        return "2G";
      case 3: 
      case 5: 
      case 6: 
      case 8: 
      case 9: 
      case 10: 
      case 12: 
      case 14: 
      case 15: 
        return "3G";
      }
      return "4G";
    }
    return "?";
  }
  
  public static String getPackageNameSelf(Context paramContext)
  {
    return paramContext.getApplicationContext().getPackageName();
  }
  
  public static String getPackageVersionSelf(Context paramContext)
  {
    int i = -1;
    try
    {
      int j = paramContext.getPackageManager().getPackageInfo(paramContext.getPackageName(), 128).versionCode;
      i = j;
    }
    catch (Exception paramContext)
    {
      for (;;)
      {
        paramContext.printStackTrace();
      }
    }
    return String.valueOf(i);
  }
  
  public static String getSdkVersion()
  {
    return SDK_VERSION;
  }
  
  private static boolean isMoreThan5Inch(Context paramContext)
  {
    boolean bool = false;
    try
    {
      paramContext = paramContext.getResources().getDisplayMetrics();
      float f1 = paramContext.heightPixels / paramContext.ydpi;
      float f2 = paramContext.widthPixels / paramContext.xdpi;
      double d = Math.sqrt(f2 * f2 + f1 * f1);
      if (d >= 7.0D) {
        bool = true;
      }
      return bool;
    }
    catch (Exception paramContext) {}
    return false;
  }
  
  private static boolean isTablet(Context paramContext)
  {
    return (paramContext.getResources().getConfiguration().screenLayout & 0xF) >= 3;
  }
}


/* Location:              /Users/paulpierre/Downloads/malware-unzip/poop.jar!/com/sdk/provide/clientinfo/InfoClient.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       0.7.1
 */