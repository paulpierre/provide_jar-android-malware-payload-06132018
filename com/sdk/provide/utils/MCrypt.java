package com.sdk.provide.utils;

import java.security.NoSuchAlgorithmException;
import javax.crypto.Cipher;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public class MCrypt
{
  private Cipher cipher;
  private String iv = "fedcba9876543210";
  private IvParameterSpec ivspec = new IvParameterSpec(this.iv.getBytes());
  
  public MCrypt()
  {
    try
    {
      this.cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
      return;
    }
    catch (NoSuchAlgorithmException localNoSuchAlgorithmException)
    {
      localNoSuchAlgorithmException.printStackTrace();
      return;
    }
    catch (NoSuchPaddingException localNoSuchPaddingException)
    {
      localNoSuchPaddingException.printStackTrace();
    }
  }
  
  private String bytesToHex(byte[] paramArrayOfByte)
  {
    Object localObject;
    if (paramArrayOfByte == null) {
      localObject = null;
    }
    int j;
    int i;
    do
    {
      return (String)localObject;
      j = paramArrayOfByte.length;
      str = "";
      i = 0;
      localObject = str;
    } while (i >= j);
    if ((paramArrayOfByte[i] & 0xFF) < 16) {}
    for (String str = str + "0" + Integer.toHexString(paramArrayOfByte[i] & 0xFF);; str = str + Integer.toHexString(paramArrayOfByte[i] & 0xFF))
    {
      i += 1;
      break;
    }
  }
  
  private byte[] hexToBytes(String paramString)
  {
    Object localObject = null;
    if (paramString == null) {}
    while (paramString.length() < 2) {
      return (byte[])localObject;
    }
    int j = paramString.length() / 2;
    byte[] arrayOfByte = new byte[j];
    int i = 0;
    for (;;)
    {
      localObject = arrayOfByte;
      if (i >= j) {
        break;
      }
      arrayOfByte[i] = ((byte)Integer.parseInt(paramString.substring(i * 2, i * 2 + 2), 16));
      i += 1;
    }
  }
  
  public String decrypt(String paramString1, String paramString2)
    throws Exception
  {
    if ((paramString2 == null) || (paramString2.length() == 0)) {
      throw new Exception("Empty string");
    }
    try
    {
      paramString1 = new SecretKeySpec(paramString1.getBytes(), "AES");
      this.cipher.init(2, paramString1, this.ivspec);
      paramString1 = this.cipher.doFinal(hexToBytes(paramString2));
      return new String(paramString1);
    }
    catch (Exception paramString1)
    {
      throw new Exception("[decrypt] " + paramString1.getMessage());
    }
  }
  
  public String encrypt(String paramString1, String paramString2)
    throws Exception
  {
    if ((paramString2 == null) || (paramString2.length() == 0)) {
      throw new Exception("Empty string");
    }
    try
    {
      paramString1 = new SecretKeySpec(paramString1.getBytes(), "AES");
      this.cipher.init(1, paramString1, this.ivspec);
      paramString1 = this.cipher.doFinal(paramString2.getBytes("UTF-8"));
      return bytesToHex(paramString1);
    }
    catch (Exception paramString1)
    {
      throw new Exception("[encrypt] " + paramString1.getMessage());
    }
  }
}


/* Location:              /Users/paulpierre/Downloads/malware-unzip/poop.jar!/com/sdk/provide/utils/MCrypt.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       0.7.1
 */