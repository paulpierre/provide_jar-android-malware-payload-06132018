package com.sdk.provide.utils;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.SharedPreferences.OnSharedPreferenceChangeListener;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Environment;
import android.preference.PreferenceManager;
import android.text.TextUtils;
import android.util.Log;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.Map;

public class TinyDB
{
  private String DEFAULT_APP_IMAGEDATA_DIRECTORY;
  private String lastImagePath = "";
  private SharedPreferences preferences;
  
  public TinyDB(Context paramContext)
  {
    this.preferences = PreferenceManager.getDefaultSharedPreferences(paramContext);
  }
  
  public static boolean isExternalStorageReadable()
  {
    String str = Environment.getExternalStorageState();
    return ("mounted".equals(str)) || ("mounted_ro".equals(str));
  }
  
  public static boolean isExternalStorageWritable()
  {
    return "mounted".equals(Environment.getExternalStorageState());
  }
  
  /* Error */
  private boolean saveBitmap(String paramString, Bitmap paramBitmap)
  {
    // Byte code:
    //   0: aload_1
    //   1: ifnull +7 -> 8
    //   4: aload_2
    //   5: ifnonnull +5 -> 10
    //   8: iconst_0
    //   9: ireturn
    //   10: iconst_0
    //   11: istore 6
    //   13: iconst_0
    //   14: istore 5
    //   16: new 54	java/io/File
    //   19: dup
    //   20: aload_1
    //   21: invokespecial 57	java/io/File:<init>	(Ljava/lang/String;)V
    //   24: astore_3
    //   25: aload_3
    //   26: invokevirtual 60	java/io/File:exists	()Z
    //   29: ifeq +10 -> 39
    //   32: aload_3
    //   33: invokevirtual 63	java/io/File:delete	()Z
    //   36: ifeq -28 -> 8
    //   39: aload_3
    //   40: invokevirtual 66	java/io/File:createNewFile	()Z
    //   43: istore 7
    //   45: iload 7
    //   47: istore 6
    //   49: aconst_null
    //   50: astore_1
    //   51: aconst_null
    //   52: astore 4
    //   54: new 68	java/io/FileOutputStream
    //   57: dup
    //   58: aload_3
    //   59: invokespecial 71	java/io/FileOutputStream:<init>	(Ljava/io/File;)V
    //   62: astore_3
    //   63: aload_2
    //   64: getstatic 77	android/graphics/Bitmap$CompressFormat:PNG	Landroid/graphics/Bitmap$CompressFormat;
    //   67: bipush 100
    //   69: aload_3
    //   70: invokevirtual 83	android/graphics/Bitmap:compress	(Landroid/graphics/Bitmap$CompressFormat;ILjava/io/OutputStream;)Z
    //   73: istore 7
    //   75: aload_3
    //   76: ifnull +141 -> 217
    //   79: aload_3
    //   80: invokevirtual 86	java/io/FileOutputStream:flush	()V
    //   83: aload_3
    //   84: invokevirtual 89	java/io/FileOutputStream:close	()V
    //   87: iconst_1
    //   88: istore 5
    //   90: iload 6
    //   92: ifeq -84 -> 8
    //   95: iload 7
    //   97: ifeq -89 -> 8
    //   100: iload 5
    //   102: ifeq -94 -> 8
    //   105: iconst_1
    //   106: ireturn
    //   107: astore_1
    //   108: aload_1
    //   109: invokevirtual 92	java/io/IOException:printStackTrace	()V
    //   112: goto -63 -> 49
    //   115: astore_1
    //   116: aload_1
    //   117: invokevirtual 92	java/io/IOException:printStackTrace	()V
    //   120: iconst_0
    //   121: istore 5
    //   123: goto -33 -> 90
    //   126: astore_3
    //   127: aload 4
    //   129: astore_2
    //   130: aload_2
    //   131: astore_1
    //   132: aload_3
    //   133: invokevirtual 93	java/lang/Exception:printStackTrace	()V
    //   136: iconst_0
    //   137: istore 8
    //   139: iload 8
    //   141: istore 7
    //   143: aload_2
    //   144: ifnull -54 -> 90
    //   147: aload_2
    //   148: invokevirtual 86	java/io/FileOutputStream:flush	()V
    //   151: aload_2
    //   152: invokevirtual 89	java/io/FileOutputStream:close	()V
    //   155: iconst_1
    //   156: istore 5
    //   158: iload 8
    //   160: istore 7
    //   162: goto -72 -> 90
    //   165: astore_1
    //   166: aload_1
    //   167: invokevirtual 92	java/io/IOException:printStackTrace	()V
    //   170: iconst_0
    //   171: istore 5
    //   173: iload 8
    //   175: istore 7
    //   177: goto -87 -> 90
    //   180: astore_2
    //   181: aload_1
    //   182: ifnull +11 -> 193
    //   185: aload_1
    //   186: invokevirtual 86	java/io/FileOutputStream:flush	()V
    //   189: aload_1
    //   190: invokevirtual 89	java/io/FileOutputStream:close	()V
    //   193: aload_2
    //   194: athrow
    //   195: astore_1
    //   196: aload_1
    //   197: invokevirtual 92	java/io/IOException:printStackTrace	()V
    //   200: goto -7 -> 193
    //   203: astore_2
    //   204: aload_3
    //   205: astore_1
    //   206: goto -25 -> 181
    //   209: astore_1
    //   210: aload_3
    //   211: astore_2
    //   212: aload_1
    //   213: astore_3
    //   214: goto -84 -> 130
    //   217: goto -127 -> 90
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	220	0	this	TinyDB
    //   0	220	1	paramString	String
    //   0	220	2	paramBitmap	Bitmap
    //   24	60	3	localObject1	Object
    //   126	85	3	localException	Exception
    //   213	1	3	str	String
    //   52	76	4	localObject2	Object
    //   14	158	5	i	int
    //   11	80	6	j	int
    //   43	133	7	bool1	boolean
    //   137	37	8	bool2	boolean
    // Exception table:
    //   from	to	target	type
    //   39	45	107	java/io/IOException
    //   79	87	115	java/io/IOException
    //   54	63	126	java/lang/Exception
    //   147	155	165	java/io/IOException
    //   54	63	180	finally
    //   132	136	180	finally
    //   185	193	195	java/io/IOException
    //   63	75	203	finally
    //   63	75	209	java/lang/Exception
  }
  
  private String setupFullPath(String paramString)
  {
    File localFile = new File(Environment.getExternalStorageDirectory(), this.DEFAULT_APP_IMAGEDATA_DIRECTORY);
    if ((isExternalStorageReadable()) && (isExternalStorageWritable()) && (!localFile.exists()) && (!localFile.mkdirs()))
    {
      Log.e("ERROR", "Failed to setup folder");
      return "";
    }
    return localFile.getPath() + '/' + paramString;
  }
  
  public void checkForNullKey(String paramString)
  {
    if (paramString == null) {
      throw new NullPointerException();
    }
  }
  
  public void checkForNullValue(String paramString)
  {
    if (paramString == null) {
      throw new NullPointerException();
    }
  }
  
  public void clear()
  {
    this.preferences.edit().clear().apply();
  }
  
  public boolean deleteImage(String paramString)
  {
    return new File(paramString).delete();
  }
  
  public Map<String, ?> getAll()
  {
    return this.preferences.getAll();
  }
  
  public boolean getBoolean(String paramString, boolean paramBoolean)
  {
    return this.preferences.getBoolean(paramString, paramBoolean);
  }
  
  public double getDouble(String paramString, double paramDouble)
  {
    paramString = getString(paramString);
    try
    {
      double d = Double.parseDouble(paramString);
      return d;
    }
    catch (NumberFormatException paramString) {}
    return paramDouble;
  }
  
  public float getFloat(String paramString)
  {
    return this.preferences.getFloat(paramString, 0.0F);
  }
  
  public Bitmap getImage(String paramString)
  {
    try
    {
      paramString = BitmapFactory.decodeFile(paramString);
      return paramString;
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
    }
    return null;
  }
  
  public int getInt(String paramString)
  {
    return this.preferences.getInt(paramString, 0);
  }
  
  public ArrayList<Boolean> getListBoolean(String paramString)
  {
    Object localObject = getListString(paramString);
    paramString = new ArrayList();
    localObject = ((ArrayList)localObject).iterator();
    while (((Iterator)localObject).hasNext()) {
      if (((String)((Iterator)localObject).next()).equals("true")) {
        paramString.add(Boolean.valueOf(true));
      } else {
        paramString.add(Boolean.valueOf(false));
      }
    }
    return paramString;
  }
  
  public ArrayList<Double> getListDouble(String paramString)
  {
    Object localObject = new ArrayList(Arrays.asList(TextUtils.split(this.preferences.getString(paramString, ""), "‚‗‚")));
    paramString = new ArrayList();
    localObject = ((ArrayList)localObject).iterator();
    while (((Iterator)localObject).hasNext()) {
      paramString.add(Double.valueOf(Double.parseDouble((String)((Iterator)localObject).next())));
    }
    return paramString;
  }
  
  public ArrayList<Integer> getListInt(String paramString)
  {
    Object localObject = new ArrayList(Arrays.asList(TextUtils.split(this.preferences.getString(paramString, ""), "‚‗‚")));
    paramString = new ArrayList();
    localObject = ((ArrayList)localObject).iterator();
    while (((Iterator)localObject).hasNext()) {
      paramString.add(Integer.valueOf(Integer.parseInt((String)((Iterator)localObject).next())));
    }
    return paramString;
  }
  
  public ArrayList<String> getListString(String paramString)
  {
    return new ArrayList(Arrays.asList(TextUtils.split(this.preferences.getString(paramString, ""), "‚‗‚")));
  }
  
  public long getLong(String paramString, long paramLong)
  {
    return this.preferences.getLong(paramString, paramLong);
  }
  
  public String getSavedImagePath()
  {
    return this.lastImagePath;
  }
  
  public String getString(String paramString)
  {
    return this.preferences.getString(paramString, "");
  }
  
  public void putBoolean(String paramString, boolean paramBoolean)
  {
    checkForNullKey(paramString);
    this.preferences.edit().putBoolean(paramString, paramBoolean).apply();
  }
  
  public void putDouble(String paramString, double paramDouble)
  {
    checkForNullKey(paramString);
    putString(paramString, String.valueOf(paramDouble));
  }
  
  public void putFloat(String paramString, float paramFloat)
  {
    checkForNullKey(paramString);
    this.preferences.edit().putFloat(paramString, paramFloat).apply();
  }
  
  public String putImage(String paramString1, String paramString2, Bitmap paramBitmap)
  {
    if ((paramString1 == null) || (paramString2 == null) || (paramBitmap == null)) {
      paramString1 = null;
    }
    do
    {
      return paramString1;
      this.DEFAULT_APP_IMAGEDATA_DIRECTORY = paramString1;
      paramString2 = setupFullPath(paramString2);
      paramString1 = paramString2;
    } while (paramString2.equals(""));
    this.lastImagePath = paramString2;
    saveBitmap(paramString2, paramBitmap);
    return paramString2;
  }
  
  public boolean putImageWithFullPath(String paramString, Bitmap paramBitmap)
  {
    return (paramString != null) && (paramBitmap != null) && (saveBitmap(paramString, paramBitmap));
  }
  
  public void putInt(String paramString, int paramInt)
  {
    checkForNullKey(paramString);
    this.preferences.edit().putInt(paramString, paramInt).apply();
  }
  
  public void putListBoolean(String paramString, ArrayList<Boolean> paramArrayList)
  {
    checkForNullKey(paramString);
    ArrayList localArrayList = new ArrayList();
    paramArrayList = paramArrayList.iterator();
    while (paramArrayList.hasNext()) {
      if (((Boolean)paramArrayList.next()).booleanValue()) {
        localArrayList.add("true");
      } else {
        localArrayList.add("false");
      }
    }
    putListString(paramString, localArrayList);
  }
  
  public void putListDouble(String paramString, ArrayList<Double> paramArrayList)
  {
    checkForNullKey(paramString);
    paramArrayList = (Double[])paramArrayList.toArray(new Double[paramArrayList.size()]);
    this.preferences.edit().putString(paramString, TextUtils.join("‚‗‚", paramArrayList)).apply();
  }
  
  public void putListInt(String paramString, ArrayList<Integer> paramArrayList)
  {
    checkForNullKey(paramString);
    paramArrayList = (Integer[])paramArrayList.toArray(new Integer[paramArrayList.size()]);
    this.preferences.edit().putString(paramString, TextUtils.join("‚‗‚", paramArrayList)).apply();
  }
  
  public void putListString(String paramString, ArrayList<String> paramArrayList)
  {
    checkForNullKey(paramString);
    paramArrayList = (String[])paramArrayList.toArray(new String[paramArrayList.size()]);
    this.preferences.edit().putString(paramString, TextUtils.join("‚‗‚", paramArrayList)).apply();
  }
  
  public void putLong(String paramString, long paramLong)
  {
    checkForNullKey(paramString);
    this.preferences.edit().putLong(paramString, paramLong).apply();
  }
  
  public void putString(String paramString1, String paramString2)
  {
    checkForNullKey(paramString1);
    checkForNullValue(paramString2);
    this.preferences.edit().putString(paramString1, paramString2).apply();
  }
  
  public void registerOnSharedPreferenceChangeListener(SharedPreferences.OnSharedPreferenceChangeListener paramOnSharedPreferenceChangeListener)
  {
    this.preferences.registerOnSharedPreferenceChangeListener(paramOnSharedPreferenceChangeListener);
  }
  
  public void remove(String paramString)
  {
    this.preferences.edit().remove(paramString).apply();
  }
  
  public void unregisterOnSharedPreferenceChangeListener(SharedPreferences.OnSharedPreferenceChangeListener paramOnSharedPreferenceChangeListener)
  {
    this.preferences.unregisterOnSharedPreferenceChangeListener(paramOnSharedPreferenceChangeListener);
  }
}


/* Location:              /Users/paulpierre/Downloads/malware-unzip/poop.jar!/com/sdk/provide/utils/TinyDB.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       0.7.1
 */